// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Core User Management
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  username    String   @unique
  password    String
  role        UserRole
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime?

  // Role-specific profiles
  student           Student?
  teacher           Teacher?
  parent            Parent?
  admin             Admin?
  studentCoordinator StudentCoordinator?
  librarian         Librarian?
  mediaCoordinator  MediaCoordinator?

  // Common fields
  profile UserProfile?

  // Authentication
  sessions Session[]

  @@map("users")
}

model UserProfile {
  id          String  @id @default(cuid())
  userId      String  @unique
  firstName   String
  lastName    String
  phone       String?
  address     String?
  dateOfBirth DateTime?
  profilePic  String?
  emergencyContact String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// Role Models
model Student {
  id             String    @id @default(cuid())
  userId         String    @unique
  studentId      String    @unique
  classId        String
  rollNumber     String
  admissionDate  DateTime
  parentId       String?
  isActive       Boolean   @default(true)
  totalPoints    Int       @default(0)

  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  class          Class     @relation(fields: [classId], references: [id])
  parent         Parent?   @relation(fields: [parentId], references: [id])

  // Academic Records
  attendances    Attendance[]
  assignments    Assignment[]
  examResults    ExamResult[]
  feePayments    FeePayment[]
  mcqAttempts    MCQAttempt[]
  achievements   Achievement[]
  bookBorrowings BookBorrowing[]

  @@map("students")
}

model Teacher {
  id           String   @id @default(cuid())
  userId       String   @unique
  teacherId    String   @unique
  subject      String
  qualification String
  experience   Int
  joiningDate  DateTime
  salary       Decimal
  isActive     Boolean  @default(true)

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Associations
  classes      Class[]
  assignments  Assignment[]
  exams        Exam[]
  mcqTests     MCQTest[]

  @@map("teachers")
}

model Parent {
  id       String @id @default(cuid())
  userId   String @unique
  parentId String @unique
  occupation String?
  income   Decimal?

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  students Student[]

  @@map("parents")
}

model Admin {
  id      String @id @default(cuid())
  userId  String @unique
  adminId String @unique
  level   AdminLevel

  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

model StudentCoordinator {
  id            String @id @default(cuid())
  userId        String @unique
  coordinatorId String @unique
  department    String

  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("student_coordinators")
}

model Librarian {
  id          String @id @default(cuid())
  userId      String @unique
  librarianId String @unique

  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("librarians")
}

model MediaCoordinator {
  id             String @id @default(cuid())
  userId         String @unique
  coordinatorId  String @unique

  user           User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("media_coordinators")
}

// Academic Structure
model Class {
  id        String @id @default(cuid())
  name      String @unique
  grade     Int
  section   String
  capacity  Int
  teacherId String
  isActive  Boolean @default(true)

  teacher   Teacher @relation(fields: [teacherId], references: [id])
  students  Student[]
  subjects  Subject[]
  timetables Timetable[]

  @@map("classes")
}

model Subject {
  id       String @id @default(cuid())
  name     String
  code     String @unique
  classId  String
  credits  Int    @default(1)

  class    Class  @relation(fields: [classId], references: [id])
  exams    Exam[]
  mcqTests MCQTest[]

  @@map("subjects")
}

// Academic Activities
model Assignment {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  teacherId   String
  studentId   String
  dueDate     DateTime
  submittedAt DateTime?
  marks       Int?
  maxMarks    Int
  status      AssignmentStatus @default(PENDING)
  fileUrl     String?

  teacher     Teacher  @relation(fields: [teacherId], references: [id])
  student     Student  @relation(fields: [studentId], references: [id])

  @@map("assignments")
}

model Exam {
  id        String   @id @default(cuid())
  title     String
  subjectId String
  teacherId String
  date      DateTime
  duration  Int      // in minutes
  maxMarks  Int
  isActive  Boolean  @default(true)

  subject   Subject  @relation(fields: [subjectId], references: [id])
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  results   ExamResult[]

  @@map("exams")
}

model ExamResult {
  id        String @id @default(cuid())
  examId    String
  studentId String
  marks     Int
  grade     String?

  exam      Exam    @relation(fields: [examId], references: [id])
  student   Student @relation(fields: [studentId], references: [id])

  @@unique([examId, studentId])
  @@map("exam_results")
}

// MCQ System
model MCQTest {
  id          String   @id @default(cuid())
  title       String
  subjectId   String
  teacherId   String
  timeLimit   Int      // in minutes
  totalMarks  Int
  isActive    Boolean  @default(true)
  scheduledAt DateTime
  createdAt   DateTime @default(now())

  subject     Subject  @relation(fields: [subjectId], references: [id])
  teacher     Teacher  @relation(fields: [teacherId], references: [id])
  questions   MCQQuestion[]
  attempts    MCQAttempt[]

  @@map("mcq_tests")
}

model MCQQuestion {
  id       String @id @default(cuid())
  testId   String
  question String @db.Text
  optionA  String
  optionB  String
  optionC  String
  optionD  String
  correct  String // A, B, C, or D
  marks    Int    @default(1)

  test     MCQTest @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@map("mcq_questions")
}

model MCQAttempt {
  id         String   @id @default(cuid())
  testId     String
  studentId  String
  answers    Json     // Store answers as JSON
  score      Int
  totalMarks Int
  startedAt  DateTime @default(now())
  submittedAt DateTime?
  timeSpent  Int?     // in seconds

  test       MCQTest  @relation(fields: [testId], references: [id])
  student    Student  @relation(fields: [studentId], references: [id])

  @@unique([testId, studentId])
  @@map("mcq_attempts")
}

// Attendance System
model Attendance {
  id        String   @id @default(cuid())
  studentId String
  date      DateTime @db.Date
  status    AttendanceStatus
  remarks   String?

  student   Student  @relation(fields: [studentId], references: [id])

  @@unique([studentId, date])
  @@map("attendances")
}

// Fee Management
model FeePayment {
  id            String      @id @default(cuid())
  studentId     String
  amount        Decimal
  feeType       FeeType
  paymentMethod PaymentMethod
  status        PaymentStatus @default(PENDING)
  dueDate       DateTime
  paidDate      DateTime?
  transactionId String?
  remarks       String?

  student       Student     @relation(fields: [studentId], references: [id])

  @@map("fee_payments")
}

// Gamification System
model Achievement {
  id          String @id @default(cuid())
  studentId   String
  type        AchievementType
  title       String
  description String
  points      Int
  badgeUrl    String?
  earnedAt    DateTime @default(now())

  student     Student @relation(fields: [studentId], references: [id])

  @@map("achievements")
}

// Communication System
model Notification {
  id        String   @id @default(cuid())
  title     String
  message   String   @db.Text
  type      NotificationType
  targetRole UserRole?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("notifications")
}

// Content Management
model NewsArticle {
  id          String   @id @default(cuid())
  title       String
  content     String   @db.Text
  excerpt     String?
  imageUrl    String?
  authorId    String
  status      ContentStatus @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime @default(now())

  @@map("news_articles")
}

model Gallery {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        MediaType
  fileUrl     String
  thumbnailUrl String?
  uploadedBy  String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  @@map("gallery")
}

// Library Management
model Book {
  id            String @id @default(cuid())
  title         String
  author        String
  isbn          String @unique
  category      String
  totalCopies   Int
  availableCopies Int
  isActive      Boolean @default(true)

  borrowings    BookBorrowing[]

  @@map("books")
}

model BookBorrowing {
  id          String    @id @default(cuid())
  bookId      String
  studentId   String
  borrowedAt  DateTime  @default(now())
  dueDate     DateTime
  returnedAt  DateTime?
  fine        Decimal?
  status      BorrowStatus @default(BORROWED)

  book        Book      @relation(fields: [bookId], references: [id])
  student     Student   @relation(fields: [studentId], references: [id])

  @@map("book_borrowings")
}

// Schedule Management
model Timetable {
  id        String @id @default(cuid())
  classId   String
  subject   String
  day       DayOfWeek
  startTime String
  endTime   String
  room      String?

  class     Class  @relation(fields: [classId], references: [id])

  @@map("timetables")
}

// Session Management
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Enums
enum UserRole {
  STUDENT
  TEACHER
  PARENT
  ADMIN
  STUDENT_COORDINATOR
  LIBRARIAN
  MEDIA_COORDINATOR
}

enum AdminLevel {
  SUPER_ADMIN
  SCHOOL_ADMIN
  DEPARTMENT_ADMIN
}

enum AssignmentStatus {
  PENDING
  SUBMITTED
  GRADED
  LATE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  HALF_DAY
}

enum FeeType {
  TUITION
  TRANSPORT
  LIBRARY
  SPORTS
  EXAM
  MISC
}

enum PaymentMethod {
  CASH
  ONLINE
  CHEQUE
  CARD
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

enum AchievementType {
  ATTENDANCE
  ACADEMIC
  SPORTS
  BEHAVIOR
  PARTICIPATION
}

enum NotificationType {
  ANNOUNCEMENT
  ASSIGNMENT
  EXAM
  FEE
  ATTENDANCE
  ACHIEVEMENT
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
}

enum BorrowStatus {
  BORROWED
  RETURNED
  OVERDUE
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
